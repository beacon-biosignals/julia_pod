#!/usr/bin/env bash

set -e

red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
cyan='\033[0;36m'
reset='\033[0m'

log() {
    echo -e "\n${cyan}$*${reset}" >&2
}

success() {
    echo -e "\n${green}$*${reset}" >&2
}

error() {
    echo -e "\n${red}$*${reset}" >&2
}

warn() {
    echo -e "\n${yellow}$*${reset}" >&2
}

bail() {
    error "$@"
    exit 1
}

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
BUILD_ARGS=$@

[[ -z ${IMAGE_REPO} ]] && {
    bail "IMAGE_REPO env variable must be set, add it to $SCRIPT_DIR/accounts.sh"
}

if [[ -n "$GITHUB_TOKEN_FILE" ]]; then
    BUILD_ARGS+=(--secret id=github_token,src="$GITHUB_TOKEN_FILE")
else
    warn "GITHUB_TOKEN_FILE env variable not set, private GitHub repos will not be accessible."
fi

if [[ -n "$PRIVATE_REGISTRY_URL" ]]; then
    BUILD_ARGS+=(--build-arg PRIVATE_REGISTRY_URL="$PRIVATE_REGISTRY_URL")
fi

[[ -f Project.toml ]] || {
    bail "no Project.toml found in $PWD"
}

[[ -d src ]] || {
    bail "no src/ found in $PWD"
}

[[ -f julia_pod/Dockerfile ]] || {
    warn "!!! no julia_pod/Dockerfile found in ${PWD}, copying ${SCRIPT_DIR}/Dockerfile.template"
    mkdir -p julia_pod
    cp "${SCRIPT_DIR}/Dockerfile.template" julia_pod/Dockerfile
}

[[ -f julia_pod/sysimage.jl ]] || {
    warn "!!! no sysimage.jl found in ${PWD}, copying ${SCRIPT_DIR}/sysimage.jl"
    mkdir -p julia_pod
    cp "${SCRIPT_DIR}/sysimage.jl" julia_pod
}

[[ -f julia_pod/startup.jl ]] || {
    warn "!!! no startup.jl found in ${PWD}, copying ${SCRIPT_DIR}/startup.jl"
    mkdir -p julia_pod
    cp "${SCRIPT_DIR}/startup.jl" julia_pod
}

[[ -f julia_pod/sysimage.packages ]] || {
    warn "!!! no julia_pod/sysimage.packages found in ${PWD}, generating list of packages to include into sysimage from Manifest.toml"
    mkdir -p julia_pod
    # this regex should work for both old and new Manifest.toml formats
    grep -o '\[\[.*\]\]' Manifest.toml | sed -r 's/\[\[(deps\.)?(.*)\]\]/\2/' > julia_pod/sysimage.packages
}

[[ -z "${JULIA_VERSION}" ]] && {
    JULIA_VERSION=1.7
    log "JULIA_VERSION environment variable not set, defaulting to ${JULIA_VERSION}"
}

[[ -z "${CUDA_VERSION}" ]] && {
    CUDA_VERSION=11.2.0
    log "CUDA_VERSION environment variable not set, defaulting to ${CUDA_VERSION}"
}

# Dockerfile copies dev/ to support `]dev --local` dependencies, make empty one if not there
mkdir -p dev

VERSIONS_TAG="cuda-${CUDA_VERSION}_julia-${JULIA_VERSION}"
DEPS_SHA="precompiled-$(sha1sum Project.toml Manifest.toml | sha1sum | head -c7)"

# CACHE TAGs, designed to only change if cache images change (can we get a hash from the image itself instead?)
BASE_IMAGE_CACHE="${IMAGE_REPO}:${VERSIONS_TAG}_base"
SYSIMAGE_IMAGE_CACHE="${IMAGE_REPO}:${VERSIONS_TAG}_sysimage"
PRECOMPILE_IMAGE_CACHE="${IMAGE_REPO}:${VERSIONS_TAG}_${DEPS_SHA}"

DOCKER_SOURCE_HASH=$(find . -type f \( -exec sha1sum "$PWD"/{} \; \) | grep -v 'driver-' | sort -z | sha1sum | head -c7)
GIT_REPO=$(git config --get remote.origin.url | grep -o '[^:/]*$' | head -c-5)
GIT_COMMIT=$(git rev-parse --short HEAD)
GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD | tr "/" "-")

GIT_INFO="${GIT_REPO}_${GIT_BRANCH}"

# IMAGE TAGs, designed to be relatable to git coordinates
IMAGE_TAG="${IMAGE_REPO}:${VERSIONS_TAG}_${GIT_INFO}_commit-${GIT_COMMIT}_sha1-${DOCKER_SOURCE_HASH}"

log "building and pushing sysimage-image with ECR_TAG = $BASE_IMAGE_CACHE"



docker buildx build -f julia_pod/Dockerfile \
                    --target base \
                    --build-arg "JULIA_VERSION=$JULIA_VERSION" \
                    --build-arg "CUDA_VERSION=$CUDA_VERSION" \
                    --build-arg "BUILDKIT_INLINE_CACHE=1" \
                    ${BUILD_ARGS[@]} \
                    --cache-from "$BASE_IMAGE_CACHE" \
                    -t "$BASE_IMAGE_CACHE" --push .

log "building and pushing sysimage-image with ECR_TAG = $SYSIMAGE_IMAGE_CACHE"

docker buildx build -f julia_pod/Dockerfile \
                    --target sysimage-image \
                    --build-arg "BUILDKIT_INLINE_CACHE=1" \
                    --build-arg "JULIA_VERSION=$JULIA_VERSION" \
                    --build-arg "CUDA_VERSION=$CUDA_VERSION" \
                    ${BUILD_ARGS[@]} \
                    --cache-from "$BASE_IMAGE_CACHE" \
                    --cache-from "$SYSIMAGE_IMAGE_CACHE" \
                    -t "$SYSIMAGE_IMAGE_CACHE" --push .

log "building and loading precompile-image with TAG = $PRECOMPILE_IMAGE_CACHE"

docker buildx build -f julia_pod/Dockerfile \
                    --target precompile-image \
                    --build-arg "BUILDKIT_INLINE_CACHE=1" \
                    --build-arg "JULIA_VERSION=$JULIA_VERSION" \
                    --build-arg "CUDA_VERSION=$CUDA_VERSION" \
                    ${BUILD_ARGS[@]} \
                    --cache-from "$BASE_IMAGE_CACHE" \
                    --cache-from "$SYSIMAGE_IMAGE_CACHE" \
                    --cache-from "$PRECOMPILE_IMAGE_CACHE" \
                    -t "$PRECOMPILE_IMAGE_CACHE" --push .

log "building and pushing image with ECR_TAG = $IMAGE_TAG"

docker buildx build -f julia_pod/Dockerfile \
                    --build-arg "BUILDKIT_INLINE_CACHE=1" \
                    --build-arg "JULIA_VERSION=$JULIA_VERSION" \
                    --build-arg "CUDA_VERSION=$CUDA_VERSION" \
                    ${BUILD_ARGS[@]} \
                    --cache-from "$BASE_IMAGE_CACHE" \
                    --cache-from "$SYSIMAGE_IMAGE_CACHE" \
                    --cache-from "$PRECOMPILE_IMAGE_CACHE" \
                    --cache-from "$IMAGE_TAG" \
                    -t "$IMAGE_TAG" --push .

log "IMAGE_REPO=$IMAGE_REPO"
log "BASE_IMAGE_CACHE=$BASE_IMAGE_CACHE"
log "SYSIMAGE_IMAGE_CACHE=$SYSIMAGE_IMAGE_CACHE"
log "PRECOMPILE_IMAGE_CACHE=$PRECOMPILE_IMAGE_CACHE"
log "IMAGE_TAG=$IMAGE_TAG"
