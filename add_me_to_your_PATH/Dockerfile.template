ARG JULIA_VERSION
ARG CUDA_VERSION

# Extract Project.toml with pinned deps only + corresponding Manifest.toml

FROM julia:${JULIA_VERSION}-buster as julia-base

FROM nvidia/cuda:${CUDA_VERSION}-cudnn8-devel-ubuntu20.04 as base

# ubuntu 20.04 is derived from debian buster
COPY --from=julia-base /usr/local/julia /usr/local/julia

RUN apt-get update && \
    apt-get install -y curl git && \
    rm -rf /var/lib/apt/lists/*

ENV JULIA_PATH /usr/local/julia
ENV PATH $JULIA_PATH/bin:$PATH
ENV JULIA_CUDA_USE_BINARYBUILDER="false"
ENV JULIA_DEBUG CUDA
ENV CUDA_HOME /usr/local/cuda
ENV PYTHON ""

# Install github-token-helper to allow for private repo access via `docker build --secret id=github_token,src=token.txt ...`
RUN curl -L https://raw.githubusercontent.com/beacon-biosignals/github-token-helper/v0.1.2/github-token-helper -o $HOME/.github-token-helper && \
    chmod +x $HOME/.github-token-helper && \
    git config --global credential.https://github.com.helper "$HOME/.github-token-helper -f /run/secrets/github_token"

# Install the General registry and optionally a private registry
ARG PRIVATE_REGISTRY_URL=""
RUN --mount=type=secret,id=github_token \
    julia -e 'using Pkg; \
              !isempty(ENV["PRIVATE_REGISTRY_URL"]) && Pkg.Registry.add(RegistrySpec(url=ENV["PRIVATE_REGISTRY_URL"])); \
              Pkg.Registry.add("General")'

FROM base as precompile-image

# install Revise and PProf, even if not a dep of project
ARG ADD_UTILS="true"
RUN --mount=type=secret,id=github_token \
    if [ "$ADD_UTILS" = "true" ]; then \
        julia -e 'using Pkg; Pkg.add("Revise"; preserve=Pkg.PRESERVE_ALL); Pkg.add("PProf"; preserve=Pkg.PRESERVE_ALL); Pkg.instantiate()'; \
    fi
RUN mkdir -p /root/.julia/config

COPY *Project.toml *Manifest.toml /JuliaProject/

# comment out if you don't have any `dev --local` deps
COPY dev/ /JuliaProject/dev/

RUN --mount=type=secret,id=github_token \
    julia --project=/JuliaProject -e 'using Pkg; Pkg.instantiate(); Pkg.build(); Pkg.precompile()'

#####
##### project initialization stage
#####
# By separating this stage out from the previous stages, we achieve nicer cache
# invalidation behavior, a slimmer final image.
# In particular, changing content in
# `src/` will invalidate the Docker cache for the stage below but will NOT
# invalidate the stage above

FROM base as project

# copy over artifacts generated during the `precompile-image` stage
COPY --from=precompile-image /JuliaProject/ /JuliaProject/
COPY --from=precompile-image /root/.julia /root/.julia
COPY --from=precompile-image /usr/local/julia/lib/julia/sys.* /usr/local/julia/lib/julia/

# contains github token, you may want to remove this file
# but then adding private deps during julia_pod sessions will not work
COPY --from=precompile-image /root/.gitconfig /root/.gitconfig

# copy source
COPY src/ JuliaProject/src/

# final precompilation step
RUN julia --project=/JuliaProject -e 'using Pkg; Pkg.build(); Pkg.precompile()'

# copy over all other files without re-running precompile
COPY . JuliaProject/

ENV JULIA_PROJECT @.

WORKDIR /JuliaProject

COPY julia_pod/startup.jl /root/.julia/config/startup.jl

CMD julia
