ARG JULIA_VERSION
ARG CUDA_VERSION

#####
##### `sysimage-project` stage
#####

# Extract Project.toml with pinned deps only + corresponding Manifest.toml
FROM julia:${JULIA_VERSION}-buster as sysimage-project

COPY Project.toml Manifest.toml ./julia_pod/sysimage.packages .

# (stdlibs count as pinned)
RUN julia --project=. -e 'using Pkg;\
                          unregistered = [p.name for p in values(Pkg.dependencies()) \
                                          if !p.is_tracking_registry]; \
                          registered = [p.name for p in values(Pkg.dependencies()) \
                                        if p.is_tracking_registry]; \
                          previous = readlines("sysimage.packages"); \
                          rm_deps = union(unregistered, setdiff(registered, previous)); \
                          println("removing $rm_deps"); \
                          isempty(rm_deps) || Pkg.rm(rm_deps; mode=Pkg.PKGMODE_MANIFEST); \
                          direct = [p.name for p in values(Pkg.dependencies()) \
                                          if !p.is_direct_dep]; \
                          intersect!(rm_deps, direct); \
                          isempty(rm_deps) || Pkg.rm(rm_deps; mode=Pkg.PKGMODE_PROJECT); \
                          println(filter(contains(Regex(join(rm_deps, "|"))), readlines("Project.toml")))'

#####
##### `julia-base` stage
#####

FROM julia:${JULIA_VERSION}-buster as julia-base

#####
##### `base` stage
#####

FROM nvidia/cuda:${CUDA_VERSION}-cudnn8-devel-ubuntu20.04 as base

# Ubuntu 20.04 based upon Debian Buster. See `/etc/debian_version` in the Ubuntu image.
COPY --from=julia-base /usr/local/julia /usr/local/julia

ENV JULIA_PATH /usr/local/julia
ENV PATH $JULIA_PATH/bin:$PATH

# Validate the architecture of the Julia executable is compatible with the CUDA container.
RUN if ! julia --history-file=no -e 'exit(0)'; then \
        uname -m && \
        readelf -h ${JULIA_PATH}/bin/julia && \
        exit 1; \
    fi

# Reduces output from `apt-get`
ENV DEBIAN_FRONTEND noninteractive

# Installing required system packages:
# - `curl`: Required for installing github-token-helper
# - `git`: Required for installing github-token-helper
RUN apt-get -qq update && \
    apt-get -qq install curl git && \
    rm -rf /var/lib/apt/lists/*

ENV JULIA_CUDA_USE_BINARYBUILDER="false"
ENV JULIA_DEBUG CUDA
ENV CUDA_HOME /usr/local/cuda
ENV PYTHON ""

# Supports private repo access via Docker build secrets (e.g. `docker build --secret id=github_token,...`):
# https://docs.docker.com/engine/reference/commandline/buildx_build/#secret
RUN curl -sSL https://raw.githubusercontent.com/beacon-biosignals/github-token-helper/v0.1.2/github-token-helper -o $HOME/.github-token-helper && \
    chmod +x $HOME/.github-token-helper && \
    git config --global credential.https://github.com.helper "$HOME/.github-token-helper -f /run/secrets/github_token"

# Install the General registry and optionally a private registry
ARG PRIVATE_REGISTRY_URL=""
RUN --mount=type=secret,id=github_token \
    julia -e 'using Pkg; \
              !isempty(ENV["PRIVATE_REGISTRY_URL"]) && Pkg.Registry.add(RegistrySpec(url=ENV["PRIVATE_REGISTRY_URL"])); \
              Pkg.Registry.add("General")'

#####
##### `sysimage-image` stage
#####

FROM base as sysimage-image

# Installing required system packages:
# - `gcc`: Required for PackageCompiler.jl
RUN apt-get -qq update && \
    apt-get -qq install gcc && \
    rm -rf /var/lib/apt/lists/*

# Instantiate the Julia project environment
ENV JULIA_PROJECT /JuliaProject
COPY --from=sysimage-project Project.toml Manifest.toml ${JULIA_PROJECT}/

RUN --mount=type=secret,id=github_token \
    julia -e 'using Pkg; Pkg.Registry.update(); Pkg.instantiate(); Pkg.build(); Pkg.precompile(strict=true)'

COPY ./julia_pod/sysimage.jl ${JULIA_PROJECT}/sysimage.jl
ARG SYSIMAGE="true"
RUN --mount=type=secret,id=github_token \
    if [ "$SYSIMAGE" = "true" ]; then \
        julia -e 'include("/JuliaProject/sysimage.jl")'; \
    fi

RUN --mount=type=secret,id=github_token \
    julia -e 'using Pkg; Pkg.instantiate()'

#####
##### `precompile-image` stage
#####

# The sysimage stage is designed to be invalidated as infrequently as
# possible while making a sysimage for faster julia load times.
# In particular, it only depends on the 'Manifest.toml' containing
# pinned dependencies only, which by julia_pod convention
# is the set of dependencies that will go into the sysimage.


FROM sysimage-image as precompile-image

# Optionally install the Revise and PProf packages without adding it to the project
ARG ADD_UTILS="true"
RUN --mount=type=secret,id=github_token \
    if [ "$ADD_UTILS" = "true" ]; then \
        JULIA_PROJECT="" julia -e 'using Pkg; Pkg.add(["Revise", "PProf"]; preserve=Pkg.PRESERVE_ALL)'; \
    fi
RUN mkdir -p /root/.julia/config

COPY *Project.toml *Manifest.toml ${JULIA_PROJECT}/

# comment out if you don't have any `dev --local` deps
COPY dev/ ${JULIA_PROJECT}/dev/

RUN --mount=type=secret,id=github_token \
    julia -e 'using Pkg; Pkg.instantiate(); Pkg.build(); Pkg.precompile(strict=true)'

#####
##### `project` initialization stage
#####

# By separating this stage out from the previous stages, we achieve nicer cache
# invalidation behavior, a slimmer final image.
# In particular, changing content in
# `src/` will invalidate the Docker cache for the stage below but will NOT
# invalidate the stage above, including the slow sysimage creation step.

FROM base as project

ENV JULIA_PROJECT /JuliaProject

# copy over artifacts generated during the `precompile-image` stage
COPY --from=precompile-image /JuliaProject/ ${JULIA_PROJECT}/
COPY --from=precompile-image /root/.julia /root/.julia
COPY --from=precompile-image /usr/local/julia/lib/julia/sys.* /usr/local/julia/lib/julia/

# contains github token, you may want to remove this file
# but then adding private deps during julia_pod sessions will not work
COPY --from=precompile-image /root/.gitconfig /root/.gitconfig

# copy source
COPY src/ ${JULIA_PROJECT}/src/

# final precompilation step
RUN julia -e 'using Pkg; Pkg.build(); Pkg.precompile(strict=true)'

# copy over all other files without re-running precompile
COPY . ${JULIA_PROJECT}/

WORKDIR ${JULIA_PROJECT}

COPY julia_pod/startup.jl /root/.julia/config/startup.jl

CMD julia
