#!/usr/bin/env bash

set -e

red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
cyan='\033[0;36m'
reset='\033[0m'

log() {
    echo -e "\n${cyan}$*${reset}" >&2
}

success() {
    echo -e "\n${green}$*${reset}" >&2
}

error() {
    echo -e "\n${red}$*${reset}" >&2
}

warn() {
    echo -e "\n${yellow}$*${reset}" >&2
}

bail() {
    error "$@"
    exit 1
}

SYNC=true
nargs="$#"

BUILD_ARGS=""

DRIVER_YAML_TEMPLATE="julia_pod/driver.yaml.template"

# parse args
while [ -n "$*" ]; do
    if [ "$1" = "--no-sync" ]; then
        SYNC=false
    elif [[ "$1" == --image=* ]]; then
        IMAGE_TAG_ARG=$(echo $1 | cut -c 9-)
    elif [[ "$1" == --port-forward=* ]]; then
        PORT_FORWARD=$(echo $1 | cut -c 16-)
    elif [[ "$1" == --julia=* ]]; then
        JULIA_COMMAND=$(echo $1 | cut -c 9-)
    elif [[ "$1" == --driver-yaml-template=* ]]; then
        DRIVER_YAML_TEMPLATE=$(echo $1 | cut -c 24-)
    elif [[ "$1" == --runid=* ]]; then
        RUNID=$(echo $1 | cut -c 9-)
    elif [[ "$1" == --build-args=* ]]; then
        BUILD_ARGS+=$(echo $1 | cut -c 14-)
        BUILD_ARGS+=" "
    elif [[ "$1" == --service-account=* ]]; then
        export KUBERNETES_SERVICEACCOUNT=$(echo $1 | cut -c 19-)
    elif [ -n "${args}" ]; then
        bail "julia_pod got unexpected option $1 instead of '--service-account', '--build-args', '--no-sync', '--image=' or '--port-forward=' (anything else is interpreted as a julia string)"
    elif [ -n "$1" ]; then
        args="$1"
    fi
    shift
done

# will we be running `devspace sync`?
if [ "${SYNC}" = true ]; then
    log ">> julia_pod will sync local '~/.julia/logs' <-> container '/root/.julia/logs' and local '$PWD' <-> container '/JuliaProject'"
else
    log ">> julia_pod will not be syncing local folders!"
fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

# define cloud account specific ENV vars
source "$SCRIPT_DIR/accounts.sh"

[[ -z "${KUBERNETES_NAMESPACE}" ]] && {
    warn "KUBERNETES_NAMESPACE env variable is not set, defaulting to 'default'"
    warn "(consider setting KUBERNETES_NAMESPACE in $SCRIPT_DIR/accounts.sh)"
}

[[ -z "${KUBERNETES_SERVICEACCOUNT}" ]] && {
    warn "KUBERNETES_SERVICEACCOUNT env variable is not set, defaulting to 'default'"
    warn "(consider setting KUBERNETES_SERVICEACCOUNT in $SCRIPT_DIR/accounts.sh)"
}

# are we using a prebuilt docker image or building an image from a julia project in pwd?
if [[ -n ${IMAGE_TAG_ARG} ]]; then
    IMAGE_TAG=$IMAGE_TAG_ARG
    log "using docker IMAGE_TAG=${IMAGE_TAG}"
else
    # build an image from pwd julia project
    source "$SCRIPT_DIR/build_image" ${BUILD_ARGS}
fi

if [[ -z "${RUNID}" ]]; then
    echo "Setting RUNID"
    if [[ -n ${IMAGE_TAG_ARG} ]]; then
        RUNID=$IMAGE_TAG
    else
        RUNID=$GIT_INFO
    fi
fi

# append day/time, both for podname quasi uniqueness and human-friendliness
# sanitize to be valid dns entry
RUNID="$(echo $RUNID | sed -e 's/[^a-zA-Z0-9]\+/-/g')-$(date +%a%Hh%Mm%S)"
RUNID="$(echo ${RUNID##*(-)} | tr '[:upper:]' '[:lower:]')"
RUNID=${RUNID}-"$(openssl rand -hex 3)"

DRIVER_YAML="julia_pod/driver-${RUNID}.yaml"

# give user a chance to customize `julia_pod/driver.yaml.template` if not found in pwd
[[ -f "${DRIVER_YAML_TEMPLATE}" ]] || {
    if [[ "${DRIVER_YAML_TEMPLATE}" == "julia_pod/driver.yaml.template" ]]; then
        warn "!!! no julia_pod/driver.yaml.template found in ${PWD}, copying ${SCRIPT_DIR}/driver.yaml.template"
        cp "${SCRIPT_DIR}/driver.yaml.template" julia_pod/.
        while true; do
            read -p ">>> View/edit newly copied stock julia_pod/driver.yaml.template k8s pod spec before continuing? [yN] " yn
            case $yn in
            [Yy]*)
                $EDITOR julia_pod/driver.yaml.template
                break
                ;;
            *) break ;;
            esac
        done
    else
        bail "${DRIVER_YAML_TEMPLATE} not found!"
    fi
}

# if `julia_pod` was called with args, replace values in `driver.yaml`
[[ -n "${JULIA_COMMAND}" ]] || {
    JULIA_COMMAND='"julia", "--startup-file=yes"'
}
if [ -n "${args}" ]; then
    # user passed in some julia code to run
    JULIA_COMMAND="${JULIA_COMMAND}, \"-e\", \"${args}\""
fi
JULIA_COMMAND="[${JULIA_COMMAND}]"
echo $JULIA_COMMAND

# generate a k8s secret name
SECRET_NAME=$(echo "${AWS_USER_ID}" | tr '[:upper:]' '[:lower:]' | sed -e 's/[^a-z0-9]\+/-/g')

# pod will fail to start unless secret and key are present. When `GITHUB_TOKEN_FILE` isn't set this will be populated with ""
echo "GITHUB_TOKEN=$([ -z ${GITHUB_TOKEN_FILE} ] || cat ${GITHUB_TOKEN_FILE})" | kubectl create secret generic $SECRET_NAME --save-config --dry-run=client --from-env-file=/dev/stdin -o yaml | kubectl apply -f -

#GIT_INFO="${GIT_REPO}_${GIT_BRANCH}"

# substitute ENV vars into driver.yaml.template > driver.yaml for this run
log "Generating $DRIVER_YAML" \
    && env \
        IMAGE_TAG="$IMAGE_TAG" \
        RUNID="$RUNID" \
        KUBERNETES_SERVICEACCOUNT="$KUBERNETES_SERVICEACCOUNT" \
        JULIA_COMMAND="$JULIA_COMMAND" \
        SECRET_NAME="$SECRET_NAME" \
        GIT_REPO="$GIT_REPO" \
        GIT_BRANCH="$GIT_BRANCH" \
        GIT_COMMIT="$GIT_COMMIT" \
        $(command -v envsubst) < "${DRIVER_YAML_TEMPLATE}" >$DRIVER_YAML

# launch job
kubectl apply -f $DRIVER_YAML -n "$KUBERNETES_NAMESPACE"

log "Waiting for job to have active pod..."

until kubectl get "job/$RUNID" -n "$KUBERNETES_NAMESPACE" -o 'jsonpath={..status.active}' | grep '1'; do
    printf "."
done

sleep 1

podname=$(kubectl get pods "--selector=job-name=$RUNID" --output=jsonpath='{.items[*].metadata.name}' -n "$KUBERNETES_NAMESPACE")

log "Waiting for pod $podname to be ready..."
until kubectl wait --for=condition=Ready "pod/$podname" -n "$KUBERNETES_NAMESPACE" --timeout=1s 2>/dev/null; do
    printf "."
done

success "==== Pod $podname is RUNNING! ====\n\n"

# if `julia_pod` was called without args, it's an interactive REPL, sync src/ and logs/ folders, attach
[[ "${SYNC}" = true ]] && {
    log "# devspace sync local ~/.julia/logs with the container's /root/.julia/logs"
    touch ~/.julia/logs/repl_history.jl
    devspace sync -n "$KUBERNETES_NAMESPACE" --pod "$podname" -c driver --initial-sync mirrorLocal --local-path ~/.julia/logs --container-path /root/.julia/logs >/tmp/devspace-$RUNID-julia-logs.log &
    echo ""
    log "# devspace sync PWD with the container's /JuliaProject"
    devspace sync -n "$KUBERNETES_NAMESPACE" --pod "$podname" -c driver --initial-sync mirrorLocal --local-path "$PWD" --container-path /JuliaProject >/tmp/devspace-$RUNID-julia-project.log &
    echo ""
}

if [[ -n ${PORT_FORWARD} ]]; then
    sleep 1
    kubectl port-forward -n $KUBERNETES_NAMESPACE pod/$podname $PORT_FORWARD >/tmp/kubectl-port-forward-$RUNID.log &
    log "\n#====> port-forwarding $PORT_FORWARD, anyone else wanting to also connect can run: <====#"
    log "kubectl port-forward -n $KUBERNETES_NAMESPACE pod/$podname $PORT_FORWARD\n\n"
fi

log "running jobs and pods can be found using selector: '-l git_repo=${GIT_REPO},git_branch=${GIT_BRANCH},git_sha=${GIT_COMMIT}'\n\n"

# drop into REPL
kubectl attach "pod/$podname" -c driver -it -n "$KUBERNETES_NAMESPACE" && echo ""

# REPL session has exited, clean up
[[ "${SYNC}" = true ]] || [[ -n ${PORT_FORWARD} ]] && {
    echo ""
    echo ""
    log "Detached from pod, killing folder syncs and/or port forwarding!"
    echo ""

    # kill background processes
    kill $(jobs -p)
}

log "====    ALL DONE    ===="
log ""
log "to force deleting job if your cluster is not set up to reap completed jobs with a ttlSecondsAfterFinished:"
log "kubectl delete job/$RUNID -n $KUBERNETES_NAMESPACE --grace-period=0 --force=true"
